{"version":3,"sources":["components/header.js","components/siteCard.js","components/body.js","App.js","serviceWorker.js","index.js","media/BR_LOGO_SupernovaGold.svg"],"names":["HeaderDiv","styled","div","Logo","img","Header","src","BRLogo","CardDiv","LeftDiv","RightDiv","SiteLink","a","CompanyText","h3","StatusText","props","liveColor","ContactText","ContactLink","SiteCard","useState","liveStatus","setLiveStatus","url","useEffect","interval","setInterval","console","log","fetch","then","response","ok","data","clearInterval","href","target","rel","company","email","BodyDiv","Body","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"2iBAMA,IAAMA,EAAYC,IAAOC,IAAV,KAQTC,EAAOF,IAAOG,IAAV,KAcKC,MARf,WACE,OACE,kBAACL,EAAD,KACE,kBAACG,EAAD,CAAMG,IAAKC,Q,ixCCjBjB,IAAMC,EAAUP,IAAOC,IAAV,KAsBPO,EAAUR,IAAOC,IAAV,KAcPQ,EAAWT,YAAOQ,EAAPR,CAAH,KAKPU,EAAWV,IAAOW,EAAV,KAUTC,EAAcZ,IAAOa,GAAV,KAOXC,EAAad,YAAOY,EAAPZ,CAAH,KAEL,SAAAe,GAAK,OAAIA,EAAMC,UAAY,qBAAuB,wBAMvDC,EAAcjB,YAAOY,EAAPZ,CAAH,KAKXkB,EAAclB,YAAOU,EAAPV,CAAH,KAkDFmB,MA9Cf,SAAkBJ,GAAQ,IAAD,EAEaK,mBAAS,MAFtB,mBAEhBC,EAFgB,KAEJC,EAFI,OAMCF,mBAAS,GANV,mBAQnBG,GARmB,UAQbR,EAAMQ,IAAM,WAkBtB,OAhBAC,qBAAU,WACR,IAAMC,EAAWC,aAAY,WAC3BC,QAAQC,IAAI,+BACZC,MAAMN,GACLO,MAAK,SAAAC,GAAQ,OAAEA,EAASC,MACxBF,MAAK,SAAAG,GAAI,OAAGX,EAAcW,QAC1B,KACH,OAAO,kBAAMC,cAAcT,MAC1B,IASD,kBAAClB,EAAD,KAEE,kBAACC,EAAD,KACA,kBAACE,EAAD,CAAUyB,KAAMpB,EAAMQ,IAAKa,OAAO,SAASC,IAAI,uBAAsB,kBAACzB,EAAD,KAAcG,EAAMuB,UAEzF,kBAACpB,EAAD,CAAaiB,KAAQ,UAAYpB,EAAMwB,OAAvC,IAA+C,kBAACtB,EAAD,gBAA/C,MAGA,kBAACR,EAAD,KACKY,EACC,kBAACP,EAAD,CAAYE,WAAS,GAArB,QACA,kBAACF,EAAD,gB,0JClHZ,IAAM0B,EAAUxC,IAAOC,IAAV,KAoBEwC,MAXf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,CAAUF,QAAU,6BAA8Bf,IAAI,0CACtD,kBAAC,EAAD,CAAUe,QAAU,qBAAsBf,IAAI,uCAC9C,kBAAC,EAAD,CAAUe,QAAU,sBAAuBf,IAAI,+CCDtCmB,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,oD","file":"static/js/main.19af1294.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from 'styled-components'\n\nimport BRLogo from '../media/BR_LOGO_SupernovaGold.svg'\n\nconst HeaderDiv = styled.div`\n  background-color: #333333;\n  height: auto;\n\n  display: flex;\n  justify-content: center;\n`\n\nconst Logo = styled.img`\n  margin: 20px 0 20px 0;\n  height: 75px;\n  width: auto;\n`\n\nfunction Header() {\n  return (\n    <HeaderDiv>\n      <Logo src={BRLogo} />\n    </HeaderDiv>\n  )\n}\n\nexport default Header\n","import React, { useEffect, useState } from 'react';\n\nimport styled from 'styled-components'\n\n\n\nconst CardDiv = styled.div`\n\n  margin: 20px 0 20px 0;\n\n  box-shadow: inset 0 1px 0 hsl(224, 84%, 74%);\n  box-shadow: 0 1px 3px hsla(0, 0%, 0%, .2);\n\n  height: auto;\n\n  display: flex;\n\n  justify-content: space-around;\n\n  background-color: hsl(204, 31%, 98%);\n\n  &:nth-child(even){\n    background-color: hsl(204, 31%, 94%)\n    })\n\n\n`\n\nconst LeftDiv = styled.div`\n\n  margin-top: 40px;\n  margin-bottom: 40px;\n\n  width: 50%;\n\n  display: flex;\n\n  align-items: center;\n\n  flex-direction: column;\n`\n\nconst RightDiv = styled(LeftDiv)`\n\n  align-items: center;\n`\n\n const SiteLink = styled.a`\n   text-decoration: none;\n\n   color: hsl(186, 90%, 20%);\n\n   &:hover {\n     color: hsl(186, 90%, 35%)\n   }\n `\n\nconst CompanyText = styled.h3`\n  font-size: 35px;\n  font-family: \"Nunito Sans\";\n\n\n`\n\nconst StatusText = styled(CompanyText)`\n\n  color: ${props => props.liveColor ? \"hsl(103, 71%, 54%)\" : \"hsl(339, 93%, 54%)\"};\n\n\n\n`\n\nconst ContactText = styled(CompanyText)`\n\n  font-size: 15px;\n`\n\nconst ContactLink = styled(SiteLink)`\n  margin-top: 10px;\n`\n\nfunction SiteCard(props) {\n\n  const [liveStatus, setLiveStatus] = useState(null);\n\n  \n\n  const [temp, setTemp] = useState(0)\n\n  let url = props.url + 'wp-json'\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      console.log('This will run every second!');\n      fetch(url)\n      .then(response=>response.ok)\n      .then(data =>setLiveStatus(data))\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n\n\n  \n \n\n\n  return (\n    <CardDiv>\n\n      <LeftDiv>\n      <SiteLink href={props.url} target=\"_blank\" rel=\"noopener noreferrer\"><CompanyText>{props.company}</CompanyText></SiteLink>\n\n      <ContactLink href = {\"mailto:\" + props.email}> <ContactText>Contact</ContactText> </ContactLink>\n      </LeftDiv>\n\n      <RightDiv>\n        { (liveStatus)\n          ? <StatusText liveColor>Live</StatusText>\n          : <StatusText>Down</StatusText>\n         }\n      </RightDiv>\n\n    </CardDiv>\n  )\n}\n\nexport default SiteCard\n","import React from 'react';\nimport styled from 'styled-components'\n\nimport SiteCard from './siteCard'\n\nconst BodyDiv = styled.div`\n\n  display: flex;\n  flex-direction: column;\n\n  justify-content: space-around;\n`\n\n\nfunction Body() {\n  return (\n    <BodyDiv>\n      <SiteCard company = \"Knights Basketball Academy\"  url=\"https://knightsbasketballacademy.com/\" />\n      <SiteCard company = \"GreenSide LawnCare\"  url=\"https://www.greensidelawncare.com/\" />\n      <SiteCard company = \"Integrated Openings\"  url=\"https://www.cardinaldoorandhardware.info\" />\n\n    </BodyDiv>\n  )\n}\n\nexport default Body\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/header'\nimport Body from './components/body'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Body />\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/BR_LOGO_SupernovaGold.af0947e9.svg\";"],"sourceRoot":""}